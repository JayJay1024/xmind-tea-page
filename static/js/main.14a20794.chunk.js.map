{"version":3,"sources":["types.tsx","components/BillAdd.tsx","components/BillShow.tsx","components/OutCategories.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["EnumBill","EnumMonth","BillAdd","props","useState","Date","billTime","setBillDate","billCategory","setBillCategory","billAmount","setBillAmount","className","showTime","onChange","value","dateString","placeholder","categoryID","dataCategory","map","v","i","Option","key","id","name","precision","defaultValue","formatter","replace","parser","amount","type","onClick","getTime","c","find","time","category","message","success","warn","ConstMonthsText","Text","BillShow","in","out","amountInOut","setAmountInOut","billColumns","title","dataIndex","align","filters","text","onFilter","record","indexOf","MonthMenu","Item","useEffect","amountIO","dataBill","filter","Number","dayjs","month","monthIndex","forEach","In","overlay","e","preventDefault","DownOutlined","code","toFixed","pagination","scroll","y","columns","dataSource","vc","format","OutCategories","style","padding","sorter","a","b","defaultSortOrder","mapCategoryAmount","Map","Out","prevAmount","get","set","arrayCategoryAmount","k","push","checkOutCategoryData","App","setDataBill","setDataCategory","Dec","setMonthIndex","Papa","parse","download","complete","res","errors","length","indexType","data","indexTime","indexCategory","indexAmount","bill","String","indexId","indexName","categories","billNew","prevBill","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.14a20794.chunk.js","sourcesContent":["export enum EnumBill { Out=0, In=1 };  // 支出收入\nexport enum EnumMonth { Jan, Fed, Mar, Apr, May, Jun, Jul, Aug, Seq, Oct, Nov, Dec };\n\n// 账单\nexport type TypeBill = {\n    time: Date,\n    type: EnumBill,\n    category?: string,\n    amount: number\n};\n\n// 分类\nexport type TypeCategory = {\n    id: string,\n    name: string,\n    type: EnumBill\n}\n\n// 收支\nexport type TypeAmountInOut = {\n    in: number,\n    out: number\n}\n\nexport const ConstMonthsText = ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'];\n","import React, { useState } from 'react';\nimport {\n    Button,\n    Select,\n    DatePicker,\n    InputNumber,\n    message\n} from 'antd';\n\nimport {\n    TypeBill,\n    TypeCategory,\n} from '../types';\nimport '../styles.css';\n\ntype TypeProp = {\n    dataCategory: TypeCategory[],\n    onClick: (billNew: TypeBill) => void\n};\n\nconst BillAdd: React.FunctionComponent<TypeProp> = (props): JSX.Element => {\n    const [billTime, setBillDate]         = useState<Date>(new Date(0));  // 日期\n    const [billCategory, setBillCategory] = useState<string>('');         // 类型\n    const [billAmount, setBillAmount]     = useState<number>(0);          // 金额\n\n    const handleDateChange = (value: any, dateString: string) => {\n        setBillDate(new Date(dateString));\n    }\n    const handleCategoryChange = (categoryID: string) => {\n        setBillCategory(categoryID);\n    }\n    const handleAmountChange = (amount: any) => {\n        setBillAmount(amount as number);\n    }\n    const handleBillAdd = () => {\n        if (billTime.getTime() === (new Date(0).getTime())) {\n            message.warn('time must be selected ~');\n            return;\n        }\n        if (billCategory === '') {\n            message.warn('category must be selected ~');\n            return;\n        }\n        if (billAmount === 0) {\n            message.warn('amount cant be ￥0.00 ~');\n            return;\n        }\n\n        const c = props.dataCategory.find(v => v.id === billCategory);  // 为了该 category 是什么 type\n        c && props.onClick({\n            time: billTime,\n            type: c.type,\n            category: billCategory,\n            amount: billAmount\n        });\n        message.success('success ~');\n    }\n\n    return (\n        <div className=\"bill-add\">\n            <DatePicker className=\"bill-add-part\" showTime onChange={handleDateChange} />\n            <Select className=\"bill-add-part\" placeholder='Select category' onChange={handleCategoryChange}>\n                {props.dataCategory.map((v, i) => {\n                    return <Select.Option key={i} value={v.id}>{v.name}</Select.Option>\n                })}\n            </Select>\n            <InputNumber\n                className=\"bill-add-part\"\n                precision={2}\n                defaultValue={0}\n                formatter={value => `￥${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n                parser={value => value ? value.replace(/￥\\s?|(,*)/g, '') : 0}\n                onChange={handleAmountChange}\n            />\n            <Button className=\"bill-add-part\" type='primary' onClick={handleBillAdd}>添加账单</Button>\n        </div>\n    );\n};\n\nexport default BillAdd;\n","import React, { useState, useEffect } from 'react';\nimport {\n    Table,\n    Menu, \n    Dropdown,\n    Typography,\n} from 'antd';\nimport { DownOutlined } from '@ant-design/icons';\nimport dayjs from 'dayjs';\n\nimport {\n    EnumBill,\n    EnumMonth,\n    TypeBill,\n    TypeCategory,\n    TypeAmountInOut,\n    ConstMonthsText\n} from '../types';\nimport '../styles.css';\n\ntype TypeProp = {\n    dataBill: TypeBill[],\n    dataCategory: TypeCategory[],\n    monthIndex: EnumMonth,\n    onClick: (o: object) => void\n}\n\nconst { Text } = Typography;\n\nconst BillShow: React.FunctionComponent<TypeProp> = (props): JSX.Element => {\n    const [amountInOut, setAmountInOut]   = useState<TypeAmountInOut>({in: 0, out: 0});  // 选择月份后收支统计\n\n    let billColumns = [{\n        title: '账单时间',\n        dataIndex: 'time',\n        key: 'time',\n        align: 'center' as any,\n    }, {\n        title: '账单类型',\n        dataIndex: 'type',\n        key: 'type',\n        align: 'center' as any,\n    }, {\n        title: '账单分类',\n        dataIndex: 'category',\n        key: 'category',\n        align: 'center' as any,\n        filters: props.dataCategory.map(v => { return { text: v.name, value: v.name } }),\n        onFilter: (value: any, record: any) => record.category.indexOf(value as string) === 0,\n    }, {\n        title: '账单金额(￥)',\n        dataIndex: 'amount',\n        key: 'amount',\n        align: 'center' as any,\n    }];\n\n    const checkBillDataForMonth = (): object[] => {\n        return props.dataBill.filter(v => Number(dayjs(v.time).month()) === Number(props.monthIndex)).map((v, i) => {\n            const c = props.dataCategory.find(vc => vc.id === v.category);\n            return {\n                key: i,\n                time: dayjs(v.time).format(),\n                type: v.type === EnumBill.In? \"收入\" : \"支出\",\n                category: c ? c.name : v.category,\n                amount: v.amount.toFixed(2)\n            }\n        });\n    }\n\n    // 月份的下拉菜单选项\n    const MonthMenu: React.ReactElement = (\n        <Menu onClick={props.onClick} >\n            {ConstMonthsText.map((v, i) => (<Menu.Item key={i}>{v}</Menu.Item>))}\n        </Menu>\n    );\n\n    // 计算收支\n    useEffect(() => {\n        let amountIO: TypeAmountInOut = {in: 0, out: 0};\n        props.dataBill.filter(v => Number(dayjs(v.time).month()) === Number(props.monthIndex)).forEach(v => {\n            v.type === EnumBill.In ? amountIO.in += v.amount : amountIO.out += v.amount;\n        });\n        setAmountInOut(amountIO);\n    }, [props.monthIndex, props.dataBill]);\n\n    return (\n        <div className=\"bill-show\">\n            <div className=\"monnth-select-in-out\">\n                <Dropdown overlay={MonthMenu}>\n                    <a className=\"ant-dropdown-link\" onClick={e => e.preventDefault()}>\n                        {ConstMonthsText[props.monthIndex]} <DownOutlined />\n                    </a>\n                </Dropdown>\n                <Text className=\"in-out\">收入总额: <Text code>￥{amountInOut.in.toFixed(2)} </Text></Text>\n                <Text className=\"in-out\">支出总额: <Text code>￥{amountInOut.out.toFixed(2)}</Text></Text>\n            </div>\n            <Table\n                pagination={false}\n                scroll={{ y: 420 }}\n                columns={billColumns}\n                dataSource={checkBillDataForMonth()}\n            />\n        </div>\n    );\n};\n\nexport default BillShow;\n","import React from 'react';\nimport { Table, Divider } from 'antd';\nimport dayjs from 'dayjs';\n\nimport {\n    EnumBill,\n    EnumMonth,\n    TypeBill,\n    TypeCategory,\n    ConstMonthsText\n} from '../types';\n\ntype TypeProp = {\n    dataBill: TypeBill[],\n    dataCategory: TypeCategory[],\n    monthIndex: EnumMonth,\n}\n\nconst OutCategories: React.FunctionComponent<TypeProp> = (props): JSX.Element => {\n    const outCategoryColumns = [{\n        title: '账单类型',\n        dataIndex: 'category',\n        key: 'category',\n        align: 'center' as any,\n    }, {\n        title: '支出金额统计(￥)',\n        dataIndex: 'amount',\n        key: 'amount',\n        align: 'center' as any,\n        sorter: (a: any, b: any) => a.amount - b.amount,\n        defaultSortOrder: 'descend' as any\n    }];\n\n    const checkOutCategoryData = (): Array<object> => {  // 分类统计支出\n        let mapCategoryAmount = new Map<string, number>();\n        const dataBillForMonth = props.dataBill.filter(v => Number(dayjs(v.time).month()) === Number(props.monthIndex));  // 选择月份后的账单数据\n\n        // => Map\n        dataBillForMonth.forEach(v => {\n            if (v.type === EnumBill.Out && v.category) {  // v.type === EnumBill.Out: 只统计支出的\n                let prevAmount = mapCategoryAmount.get(v.category);\n                prevAmount ? mapCategoryAmount.set(v.category, prevAmount + v.amount) : mapCategoryAmount.set(v.category, v.amount);\n            }\n        });\n\n        // Map => Array\n        let arrayCategoryAmount: Array<object> = [];\n        mapCategoryAmount.forEach((v, k) => {\n            const c = props.dataCategory.find(vc => vc.id === k);  // 为了分类(category)的名称(name)\n            c && arrayCategoryAmount.push({\n                key: c.id,\n                category: c.name,\n                amount: v\n            });\n        });\n        return arrayCategoryAmount\n    }\n\n    return (\n        <div>\n            <Divider style={{ padding: \"0 80px\" }}>{ConstMonthsText[props.monthIndex]}账单分类统计</Divider>\n            <Table\n                pagination={false}\n                scroll={{ y: 340 }}\n                columns={outCategoryColumns}\n                dataSource={checkOutCategoryData()}\n            />\n        </div>\n    );\n};\n\nexport default OutCategories;\n","import React, { useEffect, useState } from 'react';\nimport Papa from 'papaparse';\nimport './App.css';\n\nimport BillAdd from './components/BillAdd';\nimport BillShow from './components/BillShow';\nimport OutCategories from './components/OutCategories';\n\nimport {\n  EnumMonth,\n  TypeBill,\n  TypeCategory\n} from './types';\n\n\nfunction App() {\n  const [dataBill, setDataBill]         = useState<TypeBill[]>([]);            // 账单数据 bill.csv\n  const [dataCategory, setDataCategory] = useState<TypeCategory[]>([]);        // 账单分类 categories.csv\n  const [monthIndex, setMonthIndex]     = useState<EnumMonth>(EnumMonth.Dec);  // 选择的月份\n\n  const handleMonthIndexChange = ({ key }: any): void => {\n    setMonthIndex(key as EnumMonth);\n  }\n\n  const handleDataBillChange = (billNew: TypeBill): void => {\n    setDataBill(prevBill => {\n      prevBill.push(billNew);\n      return prevBill;\n    });\n  };\n\n  useEffect(() => {  // fetch bill.csv && parse to state\n    Papa.parse(\"https://raw.githubusercontent.com/xmindltd/hiring/master/frontend-1/bill.csv\", {\n      download: true,\n      complete: (res) => {\n        if (res.errors.length === 0) {\n          // filed's index\n          const indexType     = res.data[0].indexOf('type');\n          const indexTime     = res.data[0].indexOf('time');\n          const indexCategory = res.data[0].indexOf('category');\n          const indexAmount   = res.data[0].indexOf('amount');\n\n          let bill: TypeBill[] = [];\n          for (let i = 1; i < res.data.length; i++) {  // res.data[0] for fileds\n            bill.push({\n              time: new Date(Number(res.data[i][indexTime])),\n              type: Number(res.data[i][indexType]),\n              category: String(res.data[i][indexCategory]),\n              amount: Number(res.data[i][indexAmount])\n            });\n          }\n          setDataBill(bill);\n        }\n      }\n    });\n  }, []);\n\n  useEffect(() => {  // fetch categories.csv && parse to state\n    Papa.parse(\"https://raw.githubusercontent.com/xmindltd/hiring/master/frontend-1/categories.csv\", {\n      download: true,\n      complete: (res) => {\n        if (res.errors.length === 0) {\n          // filed's index\n          const indexId   = res.data[0].indexOf('id');\n          const indexType = res.data[0].indexOf('type');\n          const indexName = res.data[0].indexOf('name');\n\n          let categories: TypeCategory[] = [];\n          for (let i = 1; i < res.data.length; i++) {  // res.data[0] for fileds\n            categories.push({\n              id: String(res.data[i][indexId]),\n              type: Number(res.data[i][indexType]),\n              name: String(res.data[i][indexName])\n            });\n          }\n          setDataCategory(categories);\n        }\n      }\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <BillAdd dataCategory={dataCategory} onClick={handleDataBillChange} />\n      <BillShow dataBill={dataBill} dataCategory={dataCategory} monthIndex={monthIndex} onClick={handleMonthIndexChange} />\n      <OutCategories dataBill={dataBill} dataCategory={dataCategory} monthIndex={monthIndex} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}