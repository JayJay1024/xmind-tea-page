{"version":3,"sources":["types.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["EnumBill","EnumMonth","ConstMonthsText","BillAdd","React","lazy","BillShow","OutCategories","App","useState","dataBill","setDataBill","dataCategory","setDataCategory","Dec","monthIndex","setMonthIndex","useEffect","Papa","parse","download","complete","res","errors","length","indexType","data","indexOf","indexTime","indexCategory","indexAmount","bill","i","push","time","Date","Number","type","category","String","amount","indexId","indexName","categories","id","name","className","Suspense","fallback","tip","size","onClick","billNew","prevBill","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ec609177.chunk.js","sourcesContent":["export enum EnumBill { Out=0, In=1 };  // 支出收入\nexport enum EnumMonth { Jan, Fed, Mar, Apr, May, Jun, Jul, Aug, Seq, Oct, Nov, Dec };\n\n// 账单\nexport type TypeBill = {\n    time: Date,\n    type: EnumBill,\n    category?: string,\n    amount: number\n};\n\n// 分类\nexport type TypeCategory = {\n    id: string,\n    name: string,\n    type: EnumBill\n}\n\n// 收支\nexport type TypeAmountInOut = {\n    in: number,\n    out: number\n}\n\nexport const ConstMonthsText = ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'];\n","import React, { useEffect, useState } from 'react';\nimport { Spin } from 'antd';\nimport Papa from 'papaparse';\nimport './App.css';\n\nimport {\n  EnumMonth,\n  TypeBill,\n  TypeCategory\n} from './types';\n\nconst BillAdd = React.lazy(() => import('./components/BillAdd'));\nconst BillShow = React.lazy(() => import('./components/BillShow'));\nconst OutCategories = React.lazy(() => import('./components/OutCategories'));\n\n\nfunction App() {\n  const [dataBill, setDataBill]         = useState<TypeBill[]>([]);            // 账单数据 bill.csv\n  const [dataCategory, setDataCategory] = useState<TypeCategory[]>([]);        // 账单分类 categories.csv\n  const [monthIndex, setMonthIndex]     = useState<EnumMonth>(EnumMonth.Dec);  // 选择的月份\n\n  const handleMonthIndexChange = ({ key }: any): void => {\n    setMonthIndex(key as EnumMonth);\n  }\n\n  const handleDataBillChange = (billNew: TypeBill): void => {\n    setDataBill(prevBill => {\n      prevBill.push(billNew);\n      return prevBill;\n    });\n  };\n\n  useEffect(() => {  // fetch bill.csv && parse to state\n    Papa.parse(\"https://raw.githubusercontent.com/xmindltd/hiring/master/frontend-1/bill.csv\", {\n      download: true,\n      complete: (res) => {\n        if (res.errors.length === 0) {\n          // filed's index\n          const indexType     = res.data[0].indexOf('type');\n          const indexTime     = res.data[0].indexOf('time');\n          const indexCategory = res.data[0].indexOf('category');\n          const indexAmount   = res.data[0].indexOf('amount');\n\n          let bill: TypeBill[] = [];\n          for (let i = 1; i < res.data.length; i++) {  // res.data[0] for fileds\n            bill.push({\n              time: new Date(Number(res.data[i][indexTime])),\n              type: Number(res.data[i][indexType]),\n              category: String(res.data[i][indexCategory]),\n              amount: Number(res.data[i][indexAmount])\n            });\n          }\n          setDataBill(bill);\n        }\n      }\n    });\n  }, []);\n\n  useEffect(() => {  // fetch categories.csv && parse to state\n    Papa.parse(\"https://raw.githubusercontent.com/xmindltd/hiring/master/frontend-1/categories.csv\", {\n      download: true,\n      complete: (res) => {\n        if (res.errors.length === 0) {\n          // filed's index\n          const indexId   = res.data[0].indexOf('id');\n          const indexType = res.data[0].indexOf('type');\n          const indexName = res.data[0].indexOf('name');\n\n          let categories: TypeCategory[] = [];\n          for (let i = 1; i < res.data.length; i++) {  // res.data[0] for fileds\n            categories.push({\n              id: String(res.data[i][indexId]),\n              type: Number(res.data[i][indexType]),\n              name: String(res.data[i][indexName])\n            });\n          }\n          setDataCategory(categories);\n        }\n      }\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <React.Suspense fallback={<Spin tip='drinking tea ...' size='large'/>}>\n        <BillAdd dataCategory={dataCategory} onClick={handleDataBillChange} />\n        <BillShow dataBill={dataBill} dataCategory={dataCategory} monthIndex={monthIndex} onClick={handleMonthIndexChange} />\n        <OutCategories dataBill={dataBill} dataCategory={dataCategory} monthIndex={monthIndex} />\n      </React.Suspense>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}